TF_anno <- getBM(attributes =c('ensembl_gene_id',
'external_gene_name',
"description",
"entrezgene_id",
'chromosome_name',
'start_position',
'end_position'),
filters = 'external_gene_name',
values = unique(TF_df_res$TF),
mart = mart)
TF_circol_df <- left_join(TF_df_res, trans2gene, by = 'trans_id') %>%
dplyr::select(TF, gene_id) %>% distinct() %>%
left_join(TF_anno, c('external_gene_name','TF'))
TF_circol_df <- left_join(TF_df_res, trans2gene, by = 'trans_id') %>%
dplyr::select(TF, gene_id) %>% distinct() %>%
left_join(TF_anno, c('ensembl_gene_id' = 'TF'))
TF_circol_df <- left_join(TF_df_res, trans2gene, by = 'trans_id') %>%
dplyr::select(TF, gene_id) %>% distinct() %>%
left_join(TF_anno, c('external_gene_name' = 'TF'))
View(TF_circol_df)
TF_circol_df <- left_join(TF_df_res, trans2gene, by = 'trans_id') %>% head()
left_join(TF_df_res, trans2gene, by = 'trans_id') %>% head()
TF_circol_df <- left_join(TF_df_res, trans2gene, by = 'trans_id') %>% head()
View(TF_circol_df)
TF_circol_df <- left_join(TF_df_res, trans2gene, by = 'trans_id')
TF_circol_df <- left_join(TF_df_res, trans2gene, by = 'trans_id') %>%
dplyr::select(TF, gene_id) %>% distinct() %>%
left_join(TF_anno, c('TF' = 'external_gene_name'))
View(TF_circol_df)
TF_circol_df <- left_join(TF_df_res, trans2gene, by = 'trans_id') %>%
dplyr::select(TF, gene_id) %>% distinct() %>%
left_join(TF_anno, c('TF' = 'external_gene_name')) %>%
left_join(lncbed, by = c('gene_id' = 'V4')) %>%
dplyr::rename(lncchr = V1,
lncstart = V2,
lncend = V3)
View(TF_circol_df)
beda_TF <- TF_circol_df %>% dplyr::select(chr, start, end, name)
head(beda_TF)
head(TF_circol_df)
beda_TF <- TF_circol_df %>% dplyr::select(chromosome_name, start_position, end_position, TF)
bedb_lnc <- TF_circol_df %>% dplyr::select(chr = lncchr,
start = lncstart,
end = lncend,
name = gene_id)
beda_TF <- TF_circol_df %>% dplyr::select(chromosome_name, start_position, end_position, TF)
bedb_lnc <- TF_circol_df %>% dplyr::select(chr = lncchr,
start = lncstart,
end = lncend,
name = gene_id)
bed1 <- beda_TF %>% mutate(chr = str_c('chr', chr))
beda_TF <- TF_circol_df %>% dplyr::select(chr = chromosome_name,
start = start_position,
end = end_position,
name = TF)
bedb_lnc <- TF_circol_df %>% dplyr::select(chr = lncchr,
start = lncstart,
end = lncend,
name = gene_id)
bed1 <- beda_TF %>% mutate(chr = str_c('chr', chr))
bed2 <- bedb_lnc %>% mutate(chr = str_c('chr', chr))
df2 <- as.data.frame(table(bed1$name))
View(df2)
df <- data.frame(x = names(table(bed2$name)),
y = table(bed2$name))
View(df)
prob <- names(table(bed2$name)[table(bed2$name)>1])
#prob2 <- names(table(bed1$name)[table(bed1$name) > 10])
bed_anno_lnc <- dplyr::filter(bed2, name %in% prob) %>% distinct() %>% mutate(class = 'lnc')
bed_anno_TF <- distinct(bed1) %>% mutate(class = 'pro')
bed_anno <- rbind(bed_anno_lnc, bed_anno_pro)
bed_anno <- rbind(bed_anno_lnc, bed_anno_TF)
bed_anno <- bed_anno %>% mutate(name = str_replace_all(name, 'ENSMUSG', ''),
name = str_replace_all(name, 'NONMMUG', ''))
circos.initializeWithIdeogram(species = 'mm10')
circos.genomicLabels(bed_anno, labels.column = 4, side = "outside",
col = as.numeric(factor(bed_anno[[5]])),
line_col = as.numeric(factor(bed_anno[[5]])),
labels_height = 0.1,
cex = 0.35, connection_height = 0.08)
circos.genomicLink(bed1, bed2, col = rand_color(nrow(bed1)),
border = NA)
text(0, 0, "Interactions between dy-lncRNAs and TFs", cex = 0.8)
circos.clear()
prob <- names(table(bed2$name)[table(bed2$name)>2])
#prob2 <- names(table(bed1$name)[table(bed1$name) > 10])
bed_anno_lnc <- dplyr::filter(bed2, name %in% prob) %>% distinct() %>% mutate(class = 'lnc')
bed_anno_TF <- distinct(bed1) %>% mutate(class = 'pro')
bed_anno <- rbind(bed_anno_lnc, bed_anno_TF)
bed_anno <- bed_anno %>% mutate(name = str_replace_all(name, 'ENSMUSG', ''),
name = str_replace_all(name, 'NONMMUG', ''))
circos.initializeWithIdeogram(species = 'mm10')
circos.genomicLabels(bed_anno, labels.column = 4, side = "outside",
col = as.numeric(factor(bed_anno[[5]])),
line_col = as.numeric(factor(bed_anno[[5]])),
labels_height = 0.1,
cex = 0.35, connection_height = 0.08)
circos.genomicLink(bed1, bed2, col = rand_color(nrow(bed1)),
border = NA)
text(0, 0, "Interactions between dy-lncRNAs and TFs", cex = 0.8)
circos.clear()
#===> DESeq2 analysis
if(T){
condition <- factor(c(rep("control", 3), rep("week2", 3),rep("week4", 3),
rep("week7", 3), rep("week10", 3)),
levels = c("control", "week2","week4","week7","week10"))
colData <- data.frame(row.names = colnames(gene_count), condition)
dds <- DESeqDataSetFromMatrix(gene_count, colData, design= ~ condition)
dds <- DESeq(dds)
}
condition <- factor(c(rep("control", 3), rep("week2", 3),rep("week4", 3),
rep("week7", 3), rep("week10", 3)),
levels = c("control", "week2","week4","week7","week10"))
colData <- data.frame(row.names = colnames(gene_count), condition)
#===> 批次
gene_count <- input_matrix_count$mRNA_lncRNA_count %>%
column_to_rownames(var = 'gene_id')
boxplot(log2(gene_count+1))
condition <- factor(c(rep("control", 3), rep("week2", 3),rep("week4", 3),
rep("week7", 3), rep("week10", 3)),
levels = c("control", "week2","week4","week7","week10"))
colData <- data.frame(row.names = colnames(gene_count), condition)
View(colData)
cnts <- matrix(rnbinom(n=1000, mu=100, size=1/0.5), ncol=10)
cond <- factor(rep(1:2, each=5))
# object construction
dds <- DESeqDataSetFromMatrix(cnts, DataFrame(cond), ~ cond)
cnts
DataFrame(cond)
countData <- matrix(1:100,ncol=4)
condition <- factor(c("A","A","B","B"))
dds <- DESeqDataSetFromMatrix(countData, DataFrame(condition), ~ condition)
DataFrame(condition)
#===> lncRNA classes
lncRNA_classes <- read_table2("data/lncRNA_classes_pbs.txt")
View(lncRNA_classes)
source('Utils.R')
load('outcomes/inputdata/input.RData')
load('anno.RData');mart
trans2gene <- input_matrix_count$exon_trans
lncbed <- read.table('data/final_lnc.bed')
filepath <-list.files("candidate_results_all/", full.names = T)
#===> interaction with TF
if(T){
TFpath <- paste(filepath, '/', basename(filepath),
'_trans1/transcription_regulation/filter_details.txt', sep = '')
TF_list <- sapply(filepath, function(x){
TFpath <- paste(x, '/', basename(x),
'_trans1/transcription_regulation/filter_details.txt', sep = '')
if(file.info(TFpath)$size > 0 & !is.na(file.info(TFpath)$size)){
df <- read.table(TFpath, header = T, sep = '\t')
df$trans_id <- basename(x)
return(df)}}, USE.NAMES = T)
for(i in names(TF_list)){
if(is.null(TF_list[[i]])){TF_list[i] <- NULL}
}
# do.call can bind the list With or without empty elements in list
TF_df <- do.call(rbind, TF_list);rownames(TF_df) <- NULL
}
#===> interaction with protein
if(T){
Pro_list <- sapply(filepath, function(x){
Propath <- paste(x, '/', basename(x),
'_trans1/protein_interaction/intersected.clip.peak', sep = '')
if(file.info(Propath)$size > 0 & !is.na(file.info(Propath)$size)){
df <- read.table(Propath, header = F, sep = '\t')
df$trans_id <- basename(x)
return(df)}}
, USE.NAMES = T)
for(i in names(Pro_list)){
if(is.null(Pro_list[[i]])){Pro_list[i] <- NULL}}
Pro_df <- do.call(rbind, Pro_list);rownames(Pro_df) <- NULL
}
View(Pro_df)
Pro_df <- Pro_df %>% mutate(V7 = tolower(V7),
V7 = str_replace_all(V7, 'roquin-1','rc3h1'),
V7 = str_replace_all(V7, 'aid','aicda'),
V7 = str_replace_all(V7, '^celf$','cebpd'),
V7 = str_replace_all(V7, 'dazl\\?','dazl'),
V7 = str_replace_all(V7, 'rod1/ptbp3','ptbp3'),
V7 = str_replace_all(V7, 'qki5','Qk'),
V7 = str_replace_all(V7, '^nova$','Hnrnpk'))
Pro_anno <- getBM(attributes =c('ensembl_gene_id',
'external_gene_name',
'description',
'entrezgene_id',
'chromosome_name',
'start_position',
'end_position'),
filters = 'external_gene_name',
values = unique(Pro_df$V7),
mart = mart) %>%
mutate(external_gene_name = tolower(external_gene_name)) %>%
dplyr::filter(str_detect(chromosome_name, '^[0-9]+|^[XY]'))
View(Pro_anno)
loadsource('Utils.R')
load('outcomes/DEanalysis/DE_results_inte.RData') # DE genes
load('outcomes/masigpro/dynamicdf.RData') # dynamic genes
mygetenrichedgenefromkk2 <- function(genelist){
# Colorectal cancer => mmu05210
# Wnt signaling pathway => mmu04310
# JAK-STAT signaling pathway => mmu04630
# TGF-beta signaling pathway => mmu04350
# Notch signaling pathway => mmu04330
# p53 signaling pathway => mmu04115
# MAPK signaling pathway => mmu04010
# mTOR signaling pathway => mmu04150
# ErbB signaling pathway => mmu04012
pathwaylist <- c('mmu05210','mmu04310','mmu04630',
'mmu04350','mmu04330','mmu04115',
'mmu04010','mmu04150','mmu04012')
gene.df <- bitr(genelist, fromType = "ENSEMBL",
toType = c("SYMBOL", "ENTREZID"),
OrgDb = org.Mm.eg.db)
kk <- enrichKEGG(gene = gene.df$ENTREZID,
organism = 'mmu',
pvalueCutoff = 0.05)
kk_res <- as.data.frame(kk)
df <- dplyr::tbl_df(kk_res) %>%
dplyr::filter(ID %in% pathwaylist) %>%
separate_rows(geneID, sep = '/') %>%
dplyr::select(ID, Description, geneID) %>%
left_join(gene.df, by = c('geneID'='ENTREZID'))
return(df)
} #ENSEMBL SYMBOL ENTREZID
#===> DE expression genes(coding and lnc)
dedf <- dplyr::filter(DE_results_inte$DE_each_inte,
direction %in% c('up','down'),
abs(log2FoldChange) >= 1)
table(unique(dynamicdf$gene_id) %in% unique(dedf$gene_id))
#4875 dynamic and de genes
dynamic_de_df <- dynamicdf %>% dplyr::filter(gene_id %in% dedf$gene_id)
#dynamic and DE coding:4068;noncoding:807
table(dynamic_de_df$gene_type)
crcgene <- mygetenrichedgenefromkk2(dynamic_de_df$gene_id) %>%
distinct(ENSEMBL) %>% pull(ENSEMBL)
if(T){
tmplist <- list()
for(i in 1:9){
df <- mygetenrichedgenefromkk2(
dynamic_de_df[dynamic_de_df$cluster == i,]$gene_id)
cluster = str_c('cluster', i)
df$cluster = cluster
tmplist[[cluster]] <- df
}
table <- do.call(rbind, tmplist)
rownames(table) <- NULL
}
dynamic_de_crc_df <- table
save(dynamic_de_crc_df, file = 'outcomes/crcdynamic/dynamic_de_crc_df.RData')
df2 <- mygetenrichedgenefromkk2(table$ENSEMBL)
group_by(table, Description, cluster) %>%
summarise(num = n())
load('outcomes/crcdynamic/dynamic_de_crc_df.RData')
#===>
# calculate the correlation between dy_de_lnc and dy_de_crc_coding
load('outcomes/inputdata/input.RData')
library(Hmisc)
dy_de_lnc <- dynamic_de_df[dynamic_de_df$gene_type == 'lnc',] %>%
distinct(gene_id) %>% pull(gene_id)
dy_de_crc_coding <- unique(dynamic_de_crc_df
source('Utils.R')
load('outcomes/inputdata/input.RData')
load('outcomes/candidate/cor_results.RData')
head(cor_results)
unique(cor_results$target)
unique(df$target)
df <- dplyr::filter(cor_results, target %in% input_matrix_count$lnc_genelist,
source %!in% input_matrix_count$lnc_genelist,
abs(r_value) >= 0.7, p_value < 0.05)
unique(df$target)
_df <- group_by(df, target) %>% sample_n(1)
df_ <- group_by(df, target) %>% sample_n(1)
View(df_)
df$target
coding_prob <- data.frame(coding = df_$source)
lnc_prob <- data.frame(lnc = df_$target)
prob <- unique(c(df_$source,df_$target))
df2 <- dplyr::filter(input_matrix_count$mRNA_lncRNA_count, gene_id %in% prob) %>%
column_to_rownames(var = 'gene_id') %>% myddnor() %>% as.data.frame() %>%
rownames_to_column(var = 'gene_id') %>%
pivot_longer(control_1:week10_3, names_to = 'time', values_to = 'expression') %>%
mutate(time = str_remove_all(time, '_[0-9]'),
time = factor(time, levels = c('control','week2','week4','week7','week10')))
coding_prob_df <- df2 %>% dplyr::filter(gene_id %in% coding_prob$coding) %>%
left_join(coding_prob, by = c('gene_id' = 'coding')) %>% rename(coding = expression)
lnc_prob_df <- df2 %>% dplyr::filter(gene_id %in% lnc_prob$lnc) %>%
left_join(lnc_prob, by = c('gene_id' = 'lnc')) %>% rename(lnc = expression)
ggdata <-  as.data.frame(cbind(coding_prob_df, lnc_prob_df)) %>% dplyr::select(coding, lnc)
ggplot(ggdata, aes(x = log2(coding+1), y = log2(lnc+1))) +
geom_point()
ggplot(ggdata, aes(x = log10(coding+1), y = log10(lnc+1))) +
geom_point()
ggplot(ggdata, aes(x = log10(coding+1), y = log10(lnc+1))) +
geom_point() +
geom_smooth()
ggplot(ggdata, aes(x = log10(coding+1), y = log10(lnc+1))) +
geom_point() +
geom_smooth(method = 'lm')
seed(123)
sed.seed(123)
set.seed(123)
df_ <- group_by(df, target) %>% sample_n(1)
coding_prob <- data.frame(coding = df_$source)
lnc_prob <- data.frame(lnc = df_$target)
prob <- unique(c(df_$source,df_$target))
rm(list = ls())
source('Utils.R')
mkdir('outcomes/ceRNAnetwork/miRNA_DEanalysis')
#===> get the miRNA expression data from TCGA
if(F){
data_category <- 'Transcriptome Profiling'
data_type <- 'miRNA Expression Quantification'
cancer_type <- 'TCGA-COAD'
library(TCGAbiolinks)
library(DT)
library(SummarizedExperiment)
miRNA_expr <- GDCquery(project = cancer_type,
data.category = data_category,
data.type = data_type,
workflow.type = "BCGSC miRNA Profiling")
miRNA_expr_df <- GDCprepare(query = miRNA_expr)　
#save(miRNA_expr_df, file = 'outcomes/ceRNAnetwork/miRNA_DEanalysis/input.RData')
}
#===> miRNA DE analysis by DESeq2
load('outcomes/ceRNAnetwork/miRNA_DEanalysis/input.RData')
if(T){
miRNA_expr <- miRNA_expr_df %>% column_to_rownames(var = 'miRNA_ID')
miRNA_expr <- miRNA_expr[,seq(1, ncol(miRNA_expr), 3)]
colnames(miRNA_expr) <- str_replace_all(colnames(miRNA_expr), 'read_count_', '')
miRNA_expr <- miRNA_expr[apply(miRNA_expr, 1, function(x){
sum(x) > 100}),]
}
grouplist <- if_else(as.numeric(str_sub(colnames(miRNA_expr), 14, 15)) < 10,'tumor', 'normal')
grouplist <- factor(grouplist, levels = c('tumor','normal'))
table(grouplist)
nor <- colnames(miRNA_expr)[grouplist == 'normal']
tum <- colnames(miRNA_expr)[grouplist =='tumor']
tmpexpr <- miRNA_expr[,c(nor, tum)]
tmpexpr %>% as.data.frame() %>% rownames_to_column(var = 'gene_id') %>%
gather(key = 'sample', value = 'count', 2:(ncol(tmpexpr)+1)) %>%
mutate(sample = factor(sample, levels = colnames(tmpexpr))) %>%
ggplot(aes(x = sample, y = log10(count+1))) +
geom_boxplot(fill = '#228B22') +
theme_classic() +
labs(x = '',
title = 'Batch effect after normalization') +
theme(axis.text.x = element_text(hjust = 1,
vjust = 1,
angle = 90))
cancer2 <- c('TCGA-DM-A1D9-01A-11H-A154-13',
'TCGA-CM-6677-01A-11H-1838-13',
'TCGA-CK-6748-01A-11H-1838-13',
'TCGA-F4-6807-01A-11H-1838-13',
'TCGA-DM-A285-01A-11H-A16S-13',
'TCGA-A6-6650-01B-02R-A27D-13',
'TCGA-DM-A1D7-01A-11H-A154-13',
'TCGA-4T-AA8H-01A-11H-A41D-13')
tmpexpr2 <- miRNA_expr[, c(nor, cancer2)]
colnames(tmpexpr2)
#=> DESeq2 analysis
colnames(tmpexpr2) <- paste(rep(c('normal','tumor'), each = 8), 1:8, sep = '_')
colData <- data.frame(row.names = colnames(tmpexpr2),
condition = rep(c('normal','cancer'), each = 8))
dds <- DESeq2::DESeqDataSetFromMatrix(countData = tmpexpr2,
colData = colData,
design = ~condition)
dds <- DESeq2::DESeq(dds)
res <- DESeq2::results(dds, contrast = c('condition', 'cancer', 'normal'))
nor_df <- counts(dds, normalized=TRUE)
if(F){
nor_df %>% as.data.frame() %>% rownames_to_column(var = 'gene_id') %>%
gather(key = 'sample', value = 'count', 2:(ncol(nor_df)+1)) %>%
mutate(sample = factor(sample, levels = colnames(nor_df))) %>%
ggplot(aes(x = sample, y = log10(count+1))) +
geom_boxplot(fill = '#228B22') +
theme_classic() +
labs(x = '',
title = 'Batch effect after normalization') +
theme(axis.text.x = element_text(hjust = 1,
vjust = 1,
angle = 90))
}
DE_miRNA_res <- mydeanalysis(res)
#===> check it out whether candidata miRNA is DE and survival related
load('outcomes/ceRNAnetwork/miRNA_DEanalysis/DE_miRNA_res.RData')
load('outcomes/ceRNAnetwork/lncRNA_miRNA_res/lncRNA_miRNA_res.RData')
dim(DE_miRNA_res) #839
dim(candidate_miRNA) #89
prob <- candidate_miRNA %>% mutate(prob = str_replace_all(prob, 'miR', 'mir'))
DE_candi_miRNA_df <- DE_miRNA_res %>% dplyr::filter(direction %in% c('up','down')) %>%
mutate(prob = str_extract(gene_id, '(let|mir)-[0-9]+')) %>%
left_join(prob, by = 'prob') %>% drop_na()
write.csv(DE_candi_miRNA_df, file = 'outcomes/ceRNAnetwork/DE_candi_miRNA_df.csv')
#===> key miRNA family in ceRNA network
key_miRNA_family <- c('let-7-5p=miR-98-5p','miR-101-3p_1',
'miR-101a-3p_2=101b-3p_1=101b-3p_2',
'miR-103-3p=107-3p','miR-125-5p=351-5p',
'miR-128-3p','miR-132-3p=212-3p','miR-139-5p','miR-141-3p=200a-3p',
'miR-143-3p','miR-153-3p','miR-155-5p',
'miR-15-5p=16-5p=195-5p=322-5p=497-5p',
'miR-17-5p=20-5p=93-5p=106-5p','miR-181-5p',
'miR-182-5p','miR-183-5p','miR-190-5p',
'miR-192-5p=215-5p','miR-193-3p','miR-194-5p','miR-200bc-3p=429-3p',
'miR-21-5p','miR-212-5p','miR-218-5p','miR-219-5p','miR-223-3p',
'miR-24-3p','miR-25-3p=32-5p=92-3p=363-3p=367-3p','miR-26-5p',
'miR-27-3p','miR-338-3p','miR-34-5p=449-5p','miR-375-3p',
'miR-425-5p=489-3p','miR-7-5p')
#miRNA_family => hsa_mir
hsa_mir <- c('hsa-let-7b','hsa-let-7d','hsa-let-7f-1','hsa-let-7f-2',
'hsa-let-7g','hsa-mir-101-1','hsa-mir-103a-1','hsa-mir-103a-2',
'hsa-mir-125b-1','hsa-mir-128-2','hsa-mir-132','hsa-mir-139',
'hsa-mir-143','hsa-mir-153-1','hsa-mir-155','hsa-mir-15a','hsa-mir-15b',
'hsa-mir-17','hsa-mir-181a-2','hsa-mir-181c','hsa-mir-181d',
'hsa-mir-182','hsa-mir-183','hsa-mir-190a','hsa-mir-192',
'hsa-mir-193a','hsa-mir-193b','hsa-mir-194-1','hsa-mir-194-2',
'hsa-mir-200b','hsa-mir-21','hsa-mir-212','hsa-mir-218-1','hsa-mir-141',
'hsa-mir-218-2','hsa-mir-219a-1','hsa-mir-223','hsa-mir-24-1',
'hsa-mir-24-2','hsa-mir-25','hsa-mir-26a-1','hsa-mir-26a-2',
'hsa-mir-26b','hsa-mir-27a','hsa-mir-27b','hsa-mir-338',
'hsa-mir-34a','hsa-mir-375','hsa-mir-425','hsa-mir-7-1','hsa-mir-7-2','hsa-mir-7-3')
save(key_miRNA_family, file = 'outcomes/ceRNAnetwork/key_miRNA_family.RData')
ggdata <- DE_candi_miRNA_df %>% dplyr::filter(miRNA_family %in% key_miRNA_family,
gene_id %in% hsa_mir)
prob <- c('hsa-mir-181a-2', 'hsa-mir-17','hsa-mir-143',
'hsa-mir-7-2','hsa-mir-375','hsa-mir-155',
'hsa-mir-34a','hsa-mir-125b-1','hsa-mir-26b')
set.seed(123)
prob <- sample(prob, 16)
prob <- sample(hsa_mir, 16)
# visualization
nor_df %>% as.data.frame() %>% rownames_to_column(var = 'gene_id') %>%
dplyr::filter(gene_id %in% prob) %>%
gather(key = 'class', value = 'count', 2:(ncol(nor_df)+1)) %>%
mutate(class = str_replace_all(class, '_[0-9]', ''),
class = factor(class)) %>%
ggplot(aes(x = class, y = log10(count+1))) +
geom_boxplot(aes(fill = class)) +
facet_wrap(gene_id~.,scales = 'free') +
scale_fill_nejm() +
scale_y_continuous(limits = c(0,7)) +
labs(x = '',
y = paste("Expression level log10", "\n", ("(normalized reads count)"))) +
geom_signif(comparisons = list(c('normal', 'tumor')),
map_signif_level = T,
test = t.test,
y_position = 6.5) +
theme_bw() +
theme(axis.text.x = element_blank())
ggdata2 <- mydeanalysis(res) %>% drop_na()
ggdata3 <- ggdata2 %>% dplyr::filter(gene_id %in% hsa_mir)
View(ggdata3)
source('Utils.R')
load('outcomes/inputdata/input.RData')
load('outcomes/inputdata/anno.RData');mart
trans2gene <- input_matrix_count$exon_trans
lncbed <- read.table('data/final_lnc.bed')
filepath <-list.files('Annolnc2_results/', full.names = T)
mkdir('outcomes/lnc_proteins')
#===> interaction with protein
if(T){
Pro_list <- sapply(filepath, function(x){
Propath <- paste(x, '/', basename(x),
'_trans1/protein_interaction/intersected.clip.peak', sep = '')
if(file.info(Propath)$size > 0 & !is.na(file.info(Propath)$size)){
df <- read.table(Propath, header = F, sep = '\t')
df$trans_id <- basename(x)
return(df)}}
, USE.NAMES = T)
for(i in names(Pro_list)){
if(is.null(Pro_list[[i]])){Pro_list[i] <- NULL}}
Pro_df <- do.call(rbind, Pro_list);rownames(Pro_df) <- NULL
}
Pro_df <- Pro_df %>% mutate(V7 = tolower(V7),
V7 = str_replace_all(V7, 'roquin-1','rc3h1'),
V7 = str_replace_all(V7, 'aid','aicda'),
V7 = str_replace_all(V7, '^celf$','cebpd'),
V7 = str_replace_all(V7, 'dazl\\?','dazl'),
V7 = str_replace_all(V7, 'rod1/ptbp3','ptbp3'),
V7 = str_replace_all(V7, 'qki5','Qk'),
V7 = str_replace_all(V7, '^nova$','Hnrnpk'))
Pro_df <- Pro_df %>% mutate(V7 = tolower(V7),
V7 = str_replace_all(V7, 'roquin-1','rc3h1'),
V7 = str_replace_all(V7, 'aid','aicda'),
V7 = str_replace_all(V7, '^celf$','cebpd'),
V7 = str_replace_all(V7, 'dazl\\?','dazl'),
V7 = str_replace_all(V7, 'rod1/ptbp3','ptbp3'),
V7 = str_replace_all(V7, 'qki5','Qk'),
V7 = str_replace_all(V7, '^nova$','Hnrnpk'))
Pro_df
#===> interaction with protein
if(T){
Pro_list <- sapply(filepath, function(x){
Propath <- paste(x, '/', basename(x),
'_trans1/protein_interaction/intersected.clip.peak', sep = '')
if(file.info(Propath)$size > 0 & !is.na(file.info(Propath)$size)){
df <- read.table(Propath, header = F, sep = '\t')
df$trans_id <- basename(x)
return(df)}}
, USE.NAMES = T)
for(i in names(Pro_list)){
if(is.null(Pro_list[[i]])){Pro_list[i] <- NULL}}
Pro_df <- do.call(rbind, Pro_list);rownames(Pro_df) <- NULL
}
Pro_df <- Pro_df %>% mutate(V7 = tolower(V7),
V7 = str_replace_all(V7, 'roquin-1','rc3h1'),
V7 = str_replace_all(V7, 'aid','aicda'),
V7 = str_replace_all(V7, '^celf$','cebpd'),
V7 = str_replace_all(V7, 'dazl\\?','dazl'),
V7 = str_replace_all(V7, 'rod1/ptbp3','ptbp3'),
V7 = str_replace_all(V7, 'qki5','Qk'),
V7 = str_replace_all(V7, '^nova$','Hnrnpk'))
